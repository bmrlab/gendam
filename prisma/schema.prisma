// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo prisma"
  output   = "../crates/prisma/src/prisma.rs"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db?connection_limit=1"
  // url      = env("LOCAL_DB_URL")
}

model FilePath {
  id            Int       @id @default(autoincrement())
  isDir         Boolean

  materializedPath String
  name          String

  asssetObjectId  Int?
  assetObject   AssetObject? @relation(fields: [asssetObjectId], references: [id], onDelete: SetNull)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([materializedPath, name])
  @@index([materializedPath])
}

model AssetObject {
  id            Int       @id @default(autoincrement())
  note          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  file_paths    FilePath[]
}

model VideoTask {
  id            Int       @id @default(autoincrement())
  videoPath     String
  videoFileHash String
  taskType      String
  startsAt      DateTime?
  endsAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([videoFileHash, taskType])
}

model VideoFrame {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileIdentifier String
  timestamp      Int

  caption VideoFrameCaption?

  videoClip   VideoClip? @relation(fields: [videoClipId], references: [id])
  videoClipId Int?

  @@unique([fileIdentifier, timestamp])
}

model VideoTranscript {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileIdentifier String
  startTimestamp Int
  endTimestamp   Int

  text String

  @@unique([fileIdentifier, startTimestamp, endTimestamp])
}

model VideoFrameCaption {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  caption String

  frame        VideoFrame @relation(fields: [videoFrameId], references: [id])
  videoFrameId Int        @unique
}

model VideoClip {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileIdentifier String
  startTimestamp Int
  endTimestamp   Int

  frames VideoFrame[]

  caption String?
}
