// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo prisma"
  output   = "../crates/prisma/src/prisma.rs"
}

datasource db {
  provider     = "sqlite"
  url          = "file:dev.db?socket_timeout=1&connection_limit=10"
  relationMode = "prisma"
  // for sqlite params, see https://prisma.github.io/quaint/quaint/connector/struct.SqliteParams.html
  // url      = env("LOCAL_DB_URL")
}

model FilePath {
  id    String  @id() @default(cuid())
  isDir Boolean @default(false)

  materializedPath String  @default("")
  name             String  @default("")
  description      String?

  assetObjectId String?
  assetObject   AssetObject? @relation(fields: [assetObjectId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // @@unique([materializedPath, name])
  @@index([materializedPath])
  @@index([assetObjectId])
}

model AssetObject {
  id String @id() @default(cuid())

  hash     String?
  size     Int?
  mimeType String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  mediaData MediaData[]

  filePaths FilePath[]
  tasks     FileHandlerTask[]
}

model MediaData {
  id String @id() @default(cuid())

  width    Int?
  height   Int?
  duration Int?
  bitRate  Int?
  hasAudio Boolean?

  assetObjectId String?
  assetObject   AssetObject? @relation(fields: [assetObjectId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([assetObjectId])
}

model FileHandlerTask {
  id Int @id @default(autoincrement())

  assetObjectId String
  assetObject   AssetObject? @relation(fields: [assetObjectId], references: [id], onDelete: Cascade)

  taskType String

  exitCode    Int?
  exitMessage String?

  startsAt  DateTime?
  endsAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([assetObjectId, taskType])
}

model VideoFrame {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileIdentifier String
  timestamp      Int

  caption VideoFrameCaption[]

  videoClip   VideoClip? @relation(fields: [videoClipId], references: [id])
  videoClipId Int?

  @@unique([fileIdentifier, timestamp])
  @@index([videoClipId])
}

model VideoTranscript {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileIdentifier String
  startTimestamp Int
  endTimestamp   Int

  text String

  @@unique([fileIdentifier, startTimestamp, endTimestamp])
}

model VideoFrameCaption {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  caption String
  method  String

  frame        VideoFrame @relation(fields: [videoFrameId], references: [id], onDelete: Cascade)
  videoFrameId Int

  @@unique([videoFrameId, method])
}

model VideoClip {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileIdentifier String
  startTimestamp Int
  endTimestamp   Int

  frames VideoFrame[]

  caption String?
}
